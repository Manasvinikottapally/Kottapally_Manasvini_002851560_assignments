/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.PersonDetails;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.person;
import model.PersonDirectory;
/**
 *
 * @author manasvini
 */
public class ManagePersonJPanel extends javax.swing.JPanel {
     JPanel userProcessContainer;
    PersonDirectory personDirectory;

    /**
     * Creates new form ManagePersonJPanel
     */
    public ManagePersonJPanel(JPanel container, PersonDirectory directory) {
        initComponents();
        userProcessContainer = container;
        personDirectory= directory;
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnback = new javax.swing.JButton();
        lablistperson = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablist = new javax.swing.JTable();
        btnsearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnviewdetails = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();

        btnback.setText("BACK");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        lablistperson.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lablistperson.setText("LIST OF PERSON DETAILS");

        tablist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Zipcode(HA)", "City(HA)", "Zipcode(WA)", "City(WA)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablist);
        if (tablist.getColumnModel().getColumnCount() > 0) {
            tablist.getColumnModel().getColumn(0).setResizable(false);
            tablist.getColumnModel().getColumn(1).setResizable(false);
            tablist.getColumnModel().getColumn(2).setResizable(false);
            tablist.getColumnModel().getColumn(4).setResizable(false);
        }

        btnsearch.setText("Search for Person");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnviewdetails.setText("View Person Details");
        btnviewdetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewdetailsActionPerformed(evt);
            }
        });

        btndelete.setText("Delete Person Details");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lablistperson, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnviewdetails)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnback)
                                    .addGap(534, 534, 534)
                                    .addComponent(btndelete))))
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(285, 285, 285)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsearch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btndelete, btnviewdetails});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lablistperson, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnsearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(btnviewdetails)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnback)
                    .addComponent(btndelete))
                .addGap(46, 46, 46))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tablist.getSelectedRow();
        
        if(selectedRow>=0)
        {
            
            int dialogButton = JOptionPane.YES_NO_OPTION;//option dialog box for deleting the person
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the person?", "Warning", dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION)
            {
                person selectedperson =(person)tablist.getValueAt(selectedRow, 0);
                personDirectory.deleteperson(selectedperson);//methhod declared in person directory
                populateTable();//refresh list
            }
            
            else//if no is an option
            {
                JOptionPane.showMessageDialog(null,"Please select a person profile from the list","Warning",JOptionPane.WARNING_MESSAGE);
            }
        }
        else// if no row is selected
        {
            JOptionPane.showMessageDialog(null,"Please select a person profile from the list","Warning",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btndeleteActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        // TODO add your handling code here:
        if(!txtSearch.getText().isBlank())
        {
            String accountNumber = txtSearch.getText();
            person foundPerson = personDirectory.searchperson(accountNumber);
            
            if(foundPerson!=null)//if not empty, according to the method in account directory 
            {
                ViewPersonJPanel panel= new ViewPersonJPanel(userProcessContainer,personDirectory,foundPerson);
                userProcessContainer.add("ViewPerson",panel);
                CardLayout layout=(CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
                
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Person not found. Try again");
                //if account is not found among directory
            }
            
        }else
        {
            JOptionPane.showMessageDialog(null, "Please type details to view","Warning",JOptionPane.WARNING_MESSAGE);
            //if search text field is empty
        }
    }//GEN-LAST:event_btnsearchActionPerformed

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout= (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnbackActionPerformed

    private void btnviewdetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewdetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tablist.getSelectedRow();
        //check if user selected any account
        if(selectedRow>= 0){
            
            person selectedAccount= (person)tablist.getValueAt(selectedRow,0);//the row which user selected
            
            ViewPersonJPanel panel= new ViewPersonJPanel(userProcessContainer,personDirectory,selectedAccount);
            userProcessContainer.add("ViewPerson",panel);
            CardLayout layout=(CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } 
        else {//if row is not selected
            JOptionPane.showMessageDialog(null, "You need to select a profile to view  details","Warning",JOptionPane.WARNING_MESSAGE);
        }
    //GEN-LAST:event_viewdetailsbtnActionPerformed
    
    
    
    
    }//GEN-LAST:event_btnviewdetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnback;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnsearch;
    private javax.swing.JButton btnviewdetails;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lablistperson;
    private javax.swing.JTable tablist;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tablist.getModel();
        model.setRowCount(0);
      
      for(person p : personDirectory.getPerson()){
          
          Object[] row = new Object[8];
          row[0] = p;
          row[1] = p.getFirstName();
          row[2]= p.getLastName();
          row[3]= p.getSSN();
          row[4]=p.getAge();
          row[5]=p.getEmail();
          row[6]=p.getHomeAddress().toString();
          row[7]=p.getWorkAddress().toString();
          
          model.addRow(row);
      
 }
}
}

